
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import skfuzzy as fuzz
from skfuzzy import trimf, trapmf
from sklearn.preprocessing import StandardScaler

# Create synthetic data since 'data' is not defined in the original script
np.random.seed(42)
n_samples = 100
data = pd.DataFrame({
    'Bradykinesia': np.concatenate([np.random.uniform(0, 4, n_samples//2), 
                                   np.random.uniform(6, 10, n_samples//2)]),
    'Tremor': np.concatenate([np.random.uniform(0, 3, n_samples//2), 
                             np.random.uniform(5, 10, n_samples//2)]),
    'Rigidity': np.concatenate([np.random.uniform(0, 3, n_samples//2), 
                               np.random.uniform(5, 10, n_samples//2)])
})

""" 1. Bradykinesia Analysis """
def expert_membership_bradykinesia(x):
    slow = trapmf(x, [0, 0, 2, 4])
    normal = trapmf(x, [6, 8, 10, 10])
    return slow, normal

x = np.linspace(0, 10, 100)
slow_expert, normal_expert = expert_membership_bradykinesia(x)

plt.figure(figsize=(10, 5))
plt.plot(x, slow_expert, 'r', label='Extreme sloth (Expert)')
plt.plot(x, normal_expert, 'g', label='Normal (Expert)')
plt.title('Membership function for Bradykinesia')
plt.xlabel('Bradykinesia value')
plt.ylabel('Membership value')
plt.legend()
plt.grid()
plt.show()

# FCM analysis
bradykinesia_data = data['Bradykinesia'].values.reshape(-1, 1)
scaler = StandardScaler()
bradykinesia_scaled = scaler.fit_transform(bradykinesia_data)

n_clusters = 2
cntr, u, _, _, _, _, _ = fuzz.cluster.cmeans(
    bradykinesia_scaled.T, n_clusters, 2, error=0.005, maxiter=1000
)

membership_slow_fcm = u[0]
membership_normal_fcm = u[1]

x_fcm = np.linspace(bradykinesia_scaled.min(), bradykinesia_scaled.max(), 100)
slow_fcm = np.interp(x_fcm, bradykinesia_scaled.flatten(), membership_slow_fcm)
normal_fcm = np.interp(x_fcm, bradykinesia_scaled.flatten(), membership_normal_fcm)

plt.figure(figsize=(10, 5))
plt.plot(x_fcm, slow_fcm, 'r--', label='Extreme sloth (FCM)')
plt.plot(x_fcm, normal_fcm, 'g--', label='Normal (FCM)')
plt.title('FCM membership functions for Bradykinesia')
plt.xlabel('Bradykinesia value (normalized)')
plt.ylabel('Membership value')
plt.legend()
plt.grid()
plt.show()

# Comparison plot
plt.figure(figsize=(12, 6))
plt.plot(x, slow_expert, 'r', label='Extreme sloth (Expert)')
plt.plot(x, normal_expert, 'g', label='Normal (Expert)')

x_fcm_rescaled = np.linspace(0, 10, 100)
slow_fcm_rescaled = np.interp(x_fcm_rescaled, [0, 10], [bradykinesia_scaled.min(), bradykinesia_scaled.max()])
slow_fcm_plot = np.interp(slow_fcm_rescaled, bradykinesia_scaled.flatten(), membership_slow_fcm)
normal_fcm_plot = np.interp(slow_fcm_rescaled, bradykinesia_scaled.flatten(), membership_normal_fcm)

plt.plot(x_fcm_rescaled, slow_fcm_plot, 'r--', label='Extreme sloth (FCM)')
plt.plot(x_fcm_rescaled, normal_fcm_plot, 'g--', label='Normal (FCM)')

plt.title('Expert vs FCM Membership Functions')
plt.xlabel('Bradykinesia value')
plt.ylabel('Membership value')
plt.legend()
plt.grid()
plt.show()

# Statistics
mean_expert_slow = np.mean(slow_expert)
std_expert_slow = np.std(slow_expert)
mean_fcm_slow = np.mean(membership_slow_fcm)
std_fcm_slow = np.std(membership_slow_fcm)

print(f"Expert - Mean Slow: {mean_expert_slow:.2f}, Std: {std_expert_slow:.2f}")
print(f"FCM - Mean Slow: {mean_fcm_slow:.2f}, Std: {std_fcm_slow:.2f}")

""" 2. Tremor Analysis """
def expert_membership_tremor(x):
    severe = trapmf(x, [0, 0, 1, 3])
    normal = trapmf(x, [5, 7, 10, 10])
    return severe, normal

x_tremor = np.linspace(0, 10, 100)
severe_expert, normal_expert = expert_membership_tremor(x_tremor)

plt.figure(figsize=(10, 5))
plt.plot(x_tremor, severe_expert, 'r', label='Severe tremor (Expert)')
plt.plot(x_tremor, normal_expert, 'g', label='No tremor (Expert)')
plt.title('Membership function for Tremor')
plt.xlabel('Tremor value')
plt.ylabel('Membership value')
plt.legend()
plt.grid()
plt.show()

# FCM analysis
tremor_data = data['Tremor'].values.reshape(-1, 1)
tremor_scaled = scaler.fit_transform(tremor_data)

cntr, u, _, _, _, _, _ = fuzz.cluster.cmeans(
    tremor_scaled.T, n_clusters, m=2, error=0.005, maxiter=1000
)

membership_severe_fcm = u[0]
membership_normal_fcm = u[1]

x_fcm_tremor = np.linspace(tremor_scaled.min(), tremor_scaled.max(), 100)
severe_fcm = np.interp(x_fcm_tremor, tremor_scaled.flatten(), membership_severe_fcm)
normal_fcm = np.interp(x_fcm_tremor, tremor_scaled.flatten(), membership_normal_fcm)

plt.figure(figsize=(10, 5))
plt.plot(x_fcm_tremor, severe_fcm, 'r--', label='Severe tremor (FCM)')
plt.plot(x_fcm_tremor, normal_fcm, 'g--', label='No tremor (FCM)')
plt.title('FCM membership functions for Tremor')
plt.xlabel('Tremor value (normalized)')
plt.ylabel('Membership value')
plt.legend()
plt.grid()
plt.show()

# Comparison plot
plt.figure(figsize=(12, 6))
plt.plot(x_tremor, severe_expert, 'r', label='Severe tremor (Expert)')
plt.plot(x_tremor, normal_expert, 'g', label='No tremor (Expert)')

x_fcm_rescaled = np.linspace(0, 10, 100)
severe_fcm_rescaled = np.interp(x_fcm_rescaled, [0, 10], [tremor_scaled.min(), tremor_scaled.max()])
severe_fcm_plot = np.interp(severe_fcm_rescaled, tremor_scaled.flatten(), membership_severe_fcm)
normal_fcm_plot = np.interp(severe_fcm_rescaled, tremor_scaled.flatten(), membership_normal_fcm)

plt.plot(x_fcm_rescaled, severe_fcm_plot, 'r--', label='Severe tremor (FCM)')
plt.plot(x_fcm_rescaled, normal_fcm_plot, 'g--', label='No tremor (FCM)')

plt.title('Expert vs FCM Membership Functions')
plt.xlabel('Tremor value')
plt.ylabel('Membership value')
plt.legend()
plt.grid()
plt.show()

# Statistics
mean_expert_severe = np.mean(severe_expert)
std_expert_severe = np.std(severe_expert)
mean_fcm_severe = np.mean(membership_severe_fcm)
std_fcm_severe = np.std(membership_severe_fcm)

print("Results for Tremor:")
print(f"Expert - Mean Severe Tremor: {mean_expert_severe:.2f}, Std: {std_expert_severe:.2f}")
print(f"FCM - Mean Severe Tremor: {mean_fcm_severe:.2f}, Std: {std_fcm_severe:.2f}")

""" 3. Rigidity Analysis """
def expert_membership_rigidity(x):
    severe = trapmf(x, [0, 0, 1, 3])
    normal = trapmf(x, [5, 7, 10, 10])
    return severe, normal

x_rigidity = np.linspace(0, 10, 100)
severe_expert, normal_expert = expert_membership_rigidity(x_rigidity)

plt.figure(figsize=(10, 5))
plt.plot(x_rigidity, severe_expert, 'r', label='Severe rigidity (Expert)')
plt.plot(x_rigidity, normal_expert, 'g', label='No rigidity (Expert)')
plt.title('Membership function for Rigidity')
plt.xlabel('Rigidity value')
plt.ylabel('Membership value')
plt.legend()
plt.grid()
plt.show()

# FCM analysis
rigidity_data = data['Rigidity'].values.reshape(-1, 1)
rigidity_scaled = scaler.fit_transform(rigidity_data)

cntr, u, _, _, _, _, _ = fuzz.cluster.cmeans(
    rigidity_scaled.T, n_clusters, m=2, error=0.005, maxiter=1000
)

membership_severe_fcm = u[0]
membership_normal_fcm = u[1]

x_fcm_rigidity = np.linspace(rigidity_scaled.min(), rigidity_scaled.max(), 100)
severe_fcm = np.interp(x_fcm_rigidity, rigidity_scaled.flatten(), membership_severe_fcm)
normal_fcm = np.interp(x_fcm_rigidity, rigidity_scaled.flatten(), membership_normal_fcm)

plt.figure(figsize=(10, 5))
plt.plot(x_fcm_rigidity, severe_fcm, 'r--', label='Severe rigidity (FCM)')
plt.plot(x_fcm_rigidity, normal_fcm, 'g--', label='No rigidity (FCM)')
plt.title('FCM membership functions for Rigidity')
plt.xlabel('Rigidity value (normalized)')
plt.ylabel('Membership value')
plt.legend()
plt.grid()
plt.show()

# Comparison plot
plt.figure(figsize=(12, 6))
plt.plot(x_rigidity, severe_expert, 'r', label='Severe rigidity (Expert)')
plt.plot(x_rigidity, normal_expert, 'g', label='No rigidity (Expert)')

x_fcm_rescaled = np.linspace(0, 10, 100)
severe_fcm_rescaled = np.interp(x_fcm_rescaled, [0, 10], [rigidity_scaled.min(), rigidity_scaled.max()])
severe_fcm_plot = np.interp(severe_fcm_rescaled, rigidity_scaled.flatten(), membership_severe_fcm)
normal_fcm_plot = np.interp(severe_fcm_rescaled, rigidity_scaled.flatten(), membership_normal_fcm)

plt.plot(x_fcm_rescaled, severe_fcm_plot, 'r--', label='Severe rigidity (FCM)')
plt.plot(x_fcm_rescaled, normal_fcm_plot, 'g--', label='No rigidity (FCM)')

plt.title('Expert vs FCM Membership Functions')
plt.xlabel('Rigidity value')
plt.ylabel('Membership value')
plt.legend()
plt.grid()
plt.show()

# Statistics
mean_expert_severe = np.mean(severe_expert)
std_expert_severe = np.std(severe_expert)
mean_fcm_severe = np.mean(membership_severe_fcm)
std_fcm_severe = np.std(membership_severe_fcm)

print("Results for Rigidity:")
print(f"Expert - Mean Severe Rigidity: {mean_expert_severe:.2f}, Std: {std_expert_severe:.2f}")
print(f"FCM - Mean Severe Rigidity: {mean_fcm_severe:.2f}, Std: {std_fcm_severe:.2f}")





##########################################################################################################
##########################################################################################################
##########################################################################################################




## 2. FCM Analysis and Rule Extraction
def perform_fcm_analysis(feature_data, n_clusters=2):
    """Perform FCM clustering and extract membership functions"""
    scaled_data = scaler.fit_transform(feature_data.reshape(-1, 1))
    cntr, u, _, _, _, _, _ = fuzz.cluster.cmeans(
        scaled_data.T, n_clusters, 2, error=0.005, maxiter=1000
    )
    return {
        'scaled_data': scaled_data,
        'cntr': cntr,
        'u': u,
        'membership_0': u[0],
        'membership_1': u[1]
    }

# Run FCM for all features
fcm_results = {
    'bradykinesia': perform_fcm_analysis(data['Bradykinesia'].values),
    'tremor': perform_fcm_analysis(data['Tremor'].values),
    'rigidity': perform_fcm_analysis(data['Rigidity'].values)
}

## 3. Fuzzy Rule Application
def get_fcm_membership(value, feature_name):
    """Get membership values for a single input using precomputed FCM results"""
    feature_results = fcm_results[feature_name]
    scaled_value = scaler.transform([[value]])[0][0]
    
    # Interpolate membership
    m0 = fuzz.interp_membership(
        feature_results['scaled_data'].flatten(),
        feature_results['membership_0'],
        scaled_value
    )
    m1 = 1 - m0  # Since we have exactly 2 clusters
    
    return m0, m1

def apply_extracted_rules(b, t, r):
    """Apply rules extracted from FCM clustering"""
    # Get membership values
    slow_b, normal_b = get_fcm_membership(b, 'bradykinesia')
    severe_t, normal_t = get_fcm_membership(t, 'tremor')
    severe_r, normal_r = get_fcm_membership(r, 'rigidity')
    
    # Extracted fuzzy rules
    rules = [
        # Rule 1: All symptoms present
        min(slow_b, severe_t, severe_r),
        
        # Rule 2: Any two symptoms
        max(
            min(slow_b, severe_t, normal_r),
            min(slow_b, normal_t, severe_r),
            min(normal_b, severe_t, severe_r)
        ),
        
        # Rule 3: Any one symptom
        max(
            min(slow_b, normal_t, normal_r),
            min(normal_b, severe_t, normal_r),
            min(normal_b, normal_t, severe_r)
        ),
        
        # Rule 4: No symptoms
        min(normal_b, normal_t, normal_r)
    ]
    
    # Defuzzification
    output_levels = [1.0, 0.7, 0.4, 0.1]  # Corresponding to each rule's output
    weighted_sum = sum(r * l for r, l in zip(rules, output_levels))
    total_weight = sum(rules)
    
    return weighted_sum / total_weight if total_weight > 0 else 0.0

## 4. Test Cases and Evaluation
test_cases = [
    (8, 8, 8),  # All severe
    (8, 2, 2),  # Only bradykinesia
    (2, 8, 2),  # Only tremor
    (2, 2, 8),  # Only rigidity
    (3, 3, 3),  # Borderline
    (1, 1, 1)   # All normal
]

print("FCM Extracted Rules Evaluation:")
for case in test_cases:
    b, t, r = case
    result = apply_extracted_rules(b, t, r)
    print(f"Bradykinesia: {b}, Tremor: {t}, Rigidity: {r} -> Parkinson's likelihood: {result:.2f}")

## 5. Visualization (Optional)
def visualize_rules():
    """Create a 2D visualization of rule outcomes"""
    b_values = np.linspace(0, 10, 20)
    t_values = np.linspace(0, 10, 20)
    r_fixed = 5  # Fixed value for 2D visualization
    
    results = np.zeros((len(b_values), len(t_values)))
    
    for i, b in enumerate(b_values):
        for j, t in enumerate(t_values):
            results[i,j] = apply_extracted_rules(b, t, r_fixed)
    
    plt.figure(figsize=(8, 6))
    plt.contourf(t_values, b_values, results, levels=20, cmap='RdYlGn_r')
    plt.colorbar(label="Parkinson's Likelihood")
    plt.title('FCM Extracted Rules (Rigidity fixed at 5)')
    plt.xlabel('Tremor Severity')
    plt.ylabel('Bradykinesia Severity')
    plt.show()

visualize_rules()


###################################


#1. Fuzzy If-Then Rules Based on Expert Knowledge

def expert_membership_bradykinesia(x):
    """Modified to handle both array and scalar inputs"""
    if np.isscalar(x):
        x = np.array([x])  # Convert scalar to array
        
    slow = trapmf(x, [0, 0, 2, 4])
    normal = trapmf(x, [6, 8, 10, 10])
    
    if len(x) == 1:
        return slow[0], normal[0]  # Return scalars if input was scalar
    return slow, normal

def expert_membership_tremor(x):
    """Modified to handle both array and scalar inputs"""
    if np.isscalar(x):
        x = np.array([x])
        
    severe = trapmf(x, [0, 0, 1, 3])
    normal = trapmf(x, [5, 7, 10, 10])
    
    if len(x) == 1:
        return severe[0], normal[0]
    return severe, normal

def expert_membership_rigidity(x):
    """Modified to handle both array and scalar inputs"""
    if np.isscalar(x):
        x = np.array([x])
        
    severe = trapmf(x, [0, 0, 1, 3])
    normal = trapmf(x, [5, 7, 10, 10])
    
    if len(x) == 1:
        return severe[0], normal[0]
    return severe, normal

# Now the apply_expert_rules function will work with single values
def apply_expert_rules(bradykinesia, tremor, rigidity):
    """
    Applies expert-defined fuzzy rules to determine Parkinson's likelihood
    Returns a fuzzy output between 0 (no Parkinson's) and 1 (definite Parkinson's)
    """
    # Get membership values for each symptom
    slow_b, normal_b = expert_membership_bradykinesia(bradykinesia)
    severe_t, normal_t = expert_membership_tremor(tremor)
    severe_r, normal_r = expert_membership_rigidity(rigidity)
    
    # Expert-defined fuzzy rules
    rules = [
        # Rule 1: If bradykinesia is slow AND tremor is severe AND rigidity is severe -> high Parkinson's likelihood
        min(slow_b, severe_t, severe_r),
        
        # Rule 2: If bradykinesia is slow AND (tremor is severe OR rigidity is severe) -> medium-high likelihood
        min(slow_b, max(severe_t, severe_r)),
        
        # Rule 3: If (tremor is severe AND rigidity is severe) but bradykinesia is normal -> medium likelihood
        min(normal_b, severe_t, severe_r),
        
        # Rule 4: If only one symptom is severe -> low likelihood
        max(
            min(slow_b, normal_t, normal_r),
            min(normal_b, severe_t, normal_r),
            min(normal_b, normal_t, severe_r)
        ),
        
        # Rule 5: If all symptoms are normal -> no Parkinson's
        min(normal_b, normal_t, normal_r)
    ]
    
    # Defuzzify to get a crisp output (using centroid method)
    output_levels = [1.0, 0.8, 0.6, 0.3, 0.0]  # Corresponding to each rule's output strength
    weighted_sum = sum(r * l for r, l in zip(rules, output_levels))
    total_weight = sum(rules)
    
    return weighted_sum / total_weight if total_weight > 0 else 0.0

# Test the expert rules
test_cases = [
    (8, 8, 8),  # All severe
    (8, 2, 2),  # Only bradykinesia
    (2, 8, 2),  # Only tremor
    (2, 2, 8),  # Only rigidity
    (3, 3, 3),  # Borderline
    (1, 1, 1)   # All normal
]

print("Expert Rules Evaluation:")
for case in test_cases:
    b, t, r = case
    result = apply_expert_rules(b, t, r)
    print(f"Bradykinesia: {b}, Tremor: {t}, Rigidity: {r} -> Parkinson's likelihood: {result:.2f}")

# Visualization for Expert Rules System

# 1. Plot Membership Functions
plt.figure(figsize=(15, 10))

# Bradykinesia Membership
plt.subplot(3, 2, 1)
x_b = np.linspace(0, 10, 100)
slow_b, normal_b = expert_membership_bradykinesia(x_b)
plt.plot(x_b, slow_b, 'r', label='Slow Movement')
plt.plot(x_b, normal_b, 'g', label='Normal Movement')
plt.title('Bradykinesia Membership Functions')
plt.xlabel('Severity Score')
plt.ylabel('Membership Degree')
plt.legend()
plt.grid(True)

# Tremor Membership
plt.subplot(3, 2, 3)
x_t = np.linspace(0, 10, 100)
severe_t, normal_t = expert_membership_tremor(x_t)
plt.plot(x_t, severe_t, 'r', label='Severe Tremor')
plt.plot(x_t, normal_t, 'g', label='No Tremor')
plt.title('Tremor Membership Functions')
plt.xlabel('Severity Score')
plt.ylabel('Membership Degree')
plt.legend()
plt.grid(True)

# Rigidity Membership
plt.subplot(3, 2, 5)
x_r = np.linspace(0, 10, 100)
severe_r, normal_r = expert_membership_rigidity(x_r)
plt.plot(x_r, severe_r, 'r', label='Severe Rigidity')
plt.plot(x_r, normal_r, 'g', label='No Rigidity')
plt.title('Rigidity Membership Functions')
plt.xlabel('Severity Score')
plt.ylabel('Membership Degree')
plt.legend()
plt.grid(True)

# 2. Create a 2D Rule Surface Visualization (fixing one parameter)
plt.subplot(1, 2, 2)
fixed_rigidity = 5  # Fixed value for 2D visualization
b_values = np.linspace(0, 10, 20)
t_values = np.linspace(0, 10, 20)
B, T = np.meshgrid(b_values, t_values)
Z = np.zeros_like(B)

for i in range(len(b_values)):
    for j in range(len(t_values)):
        Z[j,i] = apply_expert_rules(B[j,i], T[j,i], fixed_rigidity)

contour = plt.contourf(B, T, Z, levels=20, cmap='RdYlGn_r')
plt.colorbar(contour, label="Parkinson's Likelihood")
plt.title(f'Expert Rules Surface (Rigidity fixed at {fixed_rigidity})')
plt.xlabel('Bradykinesia Score')
plt.ylabel('Tremor Score')

plt.tight_layout()
plt.show()

# 3. Test Case Visualization
plt.figure(figsize=(12, 6))
test_results = [apply_expert_rules(b, t, r) for b, t, r in test_cases]
labels = [f"Case {i+1}" for i in range(len(test_cases))]
colors = ['red' if r > 0.7 else 'orange' if r > 0.4 else 'yellow' if r > 0.1 else 'green' for r in test_results]

plt.bar(labels, test_results, color=colors)
plt.axhline(y=0.7, color='r', linestyle='--', label='High Risk Threshold')
plt.axhline(y=0.4, color='orange', linestyle='--', label='Medium Risk Threshold')
plt.axhline(y=0.1, color='y', linestyle='--', label='Low Risk Threshold')
plt.title('Expert Rules Evaluation of Test Cases')
plt.ylabel("Parkinson's Likelihood (0-1)")
plt.ylim(0, 1)
plt.legend()
plt.grid(True, axis='y')

# Annotate with actual values
for i, v in enumerate(test_results):
    plt.text(i, v + 0.03, f"{v:.2f}", ha='center')

plt.show()






#############################################################################################################
#############################################################################################################
#############################################################################################################






from sklearn.metrics import mean_squared_error

# توابع عضویت برای سیستم سوگنو (مثلثی برای ورودی‌ها)
def membership_bradykinesia(x):
    slow = np.maximum(0, np.minimum((x - 0)/(2 - 0), (4 - x)/(4 - 2)))
    normal = np.maximum(0, np.minimum((x - 6)/(8 - 6), (10 - x)/(10 - 8)))
    return slow, normal

def membership_tremor(x):
    severe = np.maximum(0, np.minimum((x - 0)/(1 - 0), (3 - x)/(3 - 1)))
    normal = np.maximum(0, np.minimum((x - 5)/(7 - 5), (10 - x)/(10 - 7)))
    return severe, normal

def membership_rigidity(x):
    severe = np.maximum(0, np.minimum((x - 0)/(1 - 0), (3 - x)/(3 - 1)))
    normal = np.maximum(0, np.minimum((x - 5)/(7 - 5), (10 - x)/(10 - 7)))
    return severe, normal

# سیستم استنتاج سوگنو
def sugeno_system(b, t, r):
    # محاسبه درجه عضویت
    slow_b, normal_b = membership_bradykinesia(b)
    severe_t, normal_t = membership_tremor(t)
    severe_r, normal_r = membership_rigidity(r)
    
    # تعریف قواعد سوگنو (خروجی‌های قطعی برای هر قاعده)
    rules = [
        # Rule 1: All symptoms severe -> Parkinson's definite (output = 1.0)
        {'weight': min(slow_b, severe_t, severe_r), 'output': 1.0},
        
        # Rule 2: Two symptoms severe -> Parkinson's likely (output = 0.7)
        {'weight': max(
            min(slow_b, severe_t, normal_r),
            min(slow_b, normal_t, severe_r),
            min(normal_b, severe_t, severe_r)
        ), 'output': 0.7},
        
        # Rule 3: One symptom severe -> Parkinson's possible (output = 0.4)
        {'weight': max(
            min(slow_b, normal_t, normal_r),
            min(normal_b, severe_t, normal_r),
            min(normal_b, normal_t, severe_r)
        ), 'output': 0.4},
        
        # Rule 4: No symptoms -> No Parkinson's (output = 0.0)
        {'weight': min(normal_b, normal_t, normal_r), 'output': 0.0}
    ]
    
    # محاسبه خروجی سوگنو
    numerator = sum(r['weight'] * r['output'] for r in rules)
    denominator = sum(r['weight'] for r in rules)
    
    return numerator / denominator if denominator > 0 else 0.0

# داده‌های تست و خروجی واقعی (فرضی)
test_cases = [
    {'input': (8, 8, 8), 'actual': 1.0},  # All severe
    {'input': (8, 2, 2), 'actual': 0.4},  # Only bradykinesia
    {'input': (2, 8, 2), 'actual': 0.4},  # Only tremor
    {'input': (2, 2, 8), 'actual': 0.4},  # Only rigidity
    {'input': (3, 3, 3), 'actual': 0.2},  # Borderline
    {'input': (1, 1, 1), 'actual': 0.0}   # All normal
]

# ارزیابی سیستم سوگنو
predictions = []
actuals = []

print("Sugeno System Evaluation:")
for case in test_cases:
    b, t, r = case['input']
    actual = case['actual']
    predicted = sugeno_system(b, t, r)
    
    predictions.append(predicted)
    actuals.append(actual)
    
    print(f"Input: Bradykinesia={b}, Tremor={t}, Rigidity={r}")
    print(f"  Predicted: {predicted:.2f}, Actual: {actual:.2f}")
    print(f"  Error: {abs(predicted - actual):.2f}")
    print()

# محاسبه RMSE
rmse = np.sqrt(mean_squared_error(actuals, predictions))
print(f"\nRoot Mean Squared Error (RMSE): {rmse:.4f}")

# نمودار مقایسه خروجی واقعی و پیش‌بینی شده
plt.figure(figsize=(10, 5))
cases = [f"Case {i+1}" for i in range(len(test_cases))]
plt.plot(cases, actuals, 'go-', label='Actual', markersize=8)
plt.plot(cases, predictions, 'rx--', label='Predicted', markersize=8)
plt.title('Comparison of Actual and Predicted Outputs')
plt.xlabel('Test Cases')
plt.ylabel("Parkinson's Likelihood")
plt.legend()
plt.grid(True)
plt.show()

# نمایش سطح تصمیم‌گیری (با ثابت نگه داشتن یکی از ورودی‌ها)
plt.figure(figsize=(12, 5))

# سطح تصمیم‌گیری برای برادی کینزی و ترمور (با ریجیدیتی ثابت)
fixed_r = 5
b_values = np.linspace(0, 10, 20)
t_values = np.linspace(0, 10, 20)
B, T = np.meshgrid(b_values, t_values)
Z = np.zeros_like(B)

for i in range(len(b_values)):
    for j in range(len(t_values)):
        Z[j, i] = sugeno_system(B[j, i], T[j, i], fixed_r)

plt.subplot(1, 2, 1)
contour = plt.contourf(B, T, Z, levels=20, cmap='RdYlGn_r')
plt.colorbar(contour, label="Parkinson's Likelihood")
plt.title(f'Sugeno Decision Surface (Rigidity fixed at {fixed_r})')
plt.xlabel('Bradykinesia Score')
plt.ylabel('Tremor Score')

# سطح تصمیم‌گیری برای برادی کینزی و ریجیدیتی (با ترمور ثابت)
fixed_t = 5
b_values = np.linspace(0, 10, 20)
r_values = np.linspace(0, 10, 20)
B, R = np.meshgrid(b_values, r_values)
Z = np.zeros_like(B)

for i in range(len(b_values)):
    for j in range(len(r_values)):
        Z[j, i] = sugeno_system(B[j, i], fixed_t, R[j, i])

plt.subplot(1, 2, 2)
contour = plt.contourf(B, R, Z, levels=20, cmap='RdYlGn_r')
plt.colorbar(contour, label="Parkinson's Likelihood")
plt.title(f'Sugeno Decision Surface (Tremor fixed at {fixed_t})')
plt.xlabel('Bradykinesia Score')
plt.ylabel('Rigidity Score')

plt.tight_layout()
plt.show()






#############################################################################################################
#############################################################################################################
#############################################################################################################







# Mamdani Fuzzy System Implementation and Comparison

def mamdani_membership_bradykinesia(x):
    """Triangular membership functions for Mamdani system"""
    slow = fuzz.trimf(x, [0, 2, 4])
    normal = fuzz.trimf(x, [6, 8, 10])
    return slow, normal

def mamdani_membership_tremor(x):
    """Triangular membership functions for Mamdani system"""
    severe = fuzz.trimf(x, [0, 1, 3])
    normal = fuzz.trimf(x, [5, 7, 10])
    return severe, normal

def mamdani_membership_rigidity(x):
    """Triangular membership functions for Mamdani system"""
    severe = fuzz.trimf(x, [0, 1, 3])
    normal = fuzz.trimf(x, [5, 7, 10])
    return severe, normal

def mamdani_inference(b, t, r):
    """
    Mamdani fuzzy inference system for Parkinson's diagnosis
    Returns a crisp value between 0 (no Parkinson's) and 1 (definite Parkinson's)
    """
    # Input variables range
    x_b = np.linspace(0, 10, 100)
    x_t = np.linspace(0, 10, 100)
    x_r = np.linspace(0, 10, 100)
    x_out = np.linspace(0, 1, 100)
    
    # Get membership values for inputs
    slow_b, normal_b = mamdani_membership_bradykinesia(x_b)
    severe_t, normal_t = mamdani_membership_tremor(x_t)
    severe_r, normal_r = mamdani_membership_rigidity(x_r)
    
    # Output membership functions
    none = fuzz.trimf(x_out, [0, 0, 0.3])
    mild = fuzz.trimf(x_out, [0.1, 0.3, 0.5])
    moderate = fuzz.trimf(x_out, [0.3, 0.5, 0.7])
    severe = fuzz.trimf(x_out, [0.5, 0.8, 1.0])
    definite = fuzz.trimf(x_out, [0.7, 1.0, 1.0])
    
    # Calculate degree of membership for each input
    b_slow = fuzz.interp_membership(x_b, slow_b, b)
    b_normal = fuzz.interp_membership(x_b, normal_b, b)
    
    t_severe = fuzz.interp_membership(x_t, severe_t, t)
    t_normal = fuzz.interp_membership(x_t, normal_t, t)
    
    r_severe = fuzz.interp_membership(x_r, severe_r, r)
    r_normal = fuzz.interp_membership(x_r, normal_r, r)
    
    # Rule 1: All symptoms severe -> definite Parkinson's
    rule1 = np.fmin(np.fmin(b_slow, t_severe), r_severe)
    activation_definite = np.fmin(rule1, definite)
    
    # Rule 2: Any two symptoms severe -> severe Parkinson's
    rule2a = np.fmin(np.fmin(b_slow, t_severe), r_normal)
    rule2b = np.fmin(np.fmin(b_slow, t_normal), r_severe)
    rule2c = np.fmin(np.fmin(b_normal, t_severe), r_severe)
    rule2 = np.fmax(rule2a, np.fmax(rule2b, rule2c))
    activation_severe = np.fmin(rule2, severe)
    
    # Rule 3: Any one symptom severe -> moderate Parkinson's
    rule3a = np.fmin(np.fmin(b_slow, t_normal), r_normal)
    rule3b = np.fmin(np.fmin(b_normal, t_severe), r_normal)
    rule3c = np.fmin(np.fmin(b_normal, t_normal), r_severe)
    rule3 = np.fmax(rule3a, np.fmax(rule3b, rule3c))
    activation_moderate = np.fmin(rule3, moderate)
    
    # Rule 4: Borderline symptoms -> mild Parkinson's
    rule4a = np.fmin(np.fmin(b_slow, t_normal), r_normal)
    rule4b = np.fmin(np.fmin(b_normal, t_severe), r_normal)
    rule4c = np.fmin(np.fmin(b_normal, t_normal), r_severe)
    rule4 = np.fmax(rule4a, np.fmax(rule4b, rule4c))
    activation_mild = np.fmin(rule4, mild)
    
    # Rule 5: No symptoms -> no Parkinson's
    rule5 = np.fmin(np.fmin(b_normal, t_normal), r_normal)
    activation_none = np.fmin(rule5, none)
    
    # Aggregate all output membership functions
    aggregated = np.fmax(activation_none, 
                        np.fmax(activation_mild,
                               np.fmax(activation_moderate,
                                     np.fmax(activation_severe, activation_definite))))
    
    # Defuzzify using centroid method
    result = fuzz.defuzz(x_out, aggregated, 'centroid')
    return result

# Test cases with actual values (hypothetical ground truth)
test_cases = [
    {'input': (8, 8, 8), 'actual': 1.0},  # All severe
    {'input': (8, 2, 2), 'actual': 0.4},  # Only bradykinesia
    {'input': (2, 8, 2), 'actual': 0.4},  # Only tremor
    {'input': (2, 2, 8), 'actual': 0.4},  # Only rigidity
    {'input': (3, 3, 3), 'actual': 0.2},  # Borderline
    {'input': (1, 1, 1), 'actual': 0.0}   # All normal
]

# Evaluate all systems
results = {
    'Expert': [],
    'FCM': [],
    'Sugeno': [],
    'Mamdani': [],
    'Actual': []
}

print("\nComparative Evaluation of All Systems:")
for case in test_cases:
    b, t, r = case['input']
    actual = case['actual']
    
    # Get predictions from all systems
    expert_pred = apply_expert_rules(b, t, r)
    fcm_pred = apply_extracted_rules(b, t, r)
    sugeno_pred = sugeno_system(b, t, r)
    mamdani_pred = mamdani_inference(b, t, r)
    
    # Store results
    results['Expert'].append(expert_pred)
    results['FCM'].append(fcm_pred)
    results['Sugeno'].append(sugeno_pred)
    results['Mamdani'].append(mamdani_pred)
    results['Actual'].append(actual)
    
    print(f"Input: B={b}, T={t}, R={r}")
    print(f"  Expert: {expert_pred:.2f}, FCM: {fcm_pred:.2f}, Sugeno: {sugeno_pred:.2f}, Mamdani: {mamdani_pred:.2f}, Actual: {actual:.2f}")

# Calculate RMSE for each system
from sklearn.metrics import mean_squared_error

rmse_results = {}
for system in ['Expert', 'FCM', 'Sugeno', 'Mamdani']:
    rmse = np.sqrt(mean_squared_error(results['Actual'], results[system]))
    rmse_results[system] = rmse

print("\nRMSE Comparison:")
for system, rmse in rmse_results.items():
    print(f"{system:>7} System RMSE: {rmse:.4f}")

# Visualization 1: Membership Functions Comparison
plt.figure(figsize=(15, 10))

# Bradykinesia Membership
plt.subplot(3, 1, 1)
x = np.linspace(0, 10, 100)

# Expert
slow_e, normal_e = expert_membership_bradykinesia(x)
plt.plot(x, slow_e, 'r-', label='Expert: Slow')
plt.plot(x, normal_e, 'g-', label='Expert: Normal')

# Mamdani
slow_m, normal_m = mamdani_membership_bradykinesia(x)
plt.plot(x, slow_m, 'r--', label='Mamdani: Slow')
plt.plot(x, normal_m, 'g--', label='Mamdani: Normal')

plt.title('Bradykinesia Membership Functions Comparison')
plt.xlabel('Severity Score')
plt.ylabel('Membership Degree')
plt.legend()
plt.grid(True)

# Tremor Membership
plt.subplot(3, 1, 2)
severe_e, normal_e = expert_membership_tremor(x)
plt.plot(x, severe_e, 'r-', label='Expert: Severe')
plt.plot(x, normal_e, 'g-', label='Expert: Normal')

severe_m, normal_m = mamdani_membership_tremor(x)
plt.plot(x, severe_m, 'r--', label='Mamdani: Severe')
plt.plot(x, normal_m, 'g--', label='Mamdani: Normal')

plt.title('Tremor Membership Functions Comparison')
plt.xlabel('Severity Score')
plt.ylabel('Membership Degree')
plt.legend()
plt.grid(True)

# Rigidity Membership
plt.subplot(3, 1, 3)
severe_e, normal_e = expert_membership_rigidity(x)
plt.plot(x, severe_e, 'r-', label='Expert: Severe')
plt.plot(x, normal_e, 'g-', label='Expert: Normal')

severe_m, normal_m = mamdani_membership_rigidity(x)
plt.plot(x, severe_m, 'r--', label='Mamdani: Severe')
plt.plot(x, normal_m, 'g--', label='Mamdani: Normal')

plt.title('Rigidity Membership Functions Comparison')
plt.xlabel('Severity Score')
plt.ylabel('Membership Degree')
plt.legend()
plt.grid(True)

plt.tight_layout()
plt.show()

# Visualization 2: Test Case Comparison
plt.figure(figsize=(12, 6))
cases = [f"Case {i+1}" for i in range(len(test_cases))]
width = 0.15
x = np.arange(len(cases))

plt.bar(x - 0.225, results['Expert'], width, label='Expert', color='blue')
plt.bar(x - 0.075, results['FCM'], width, label='FCM', color='green')
plt.bar(x + 0.075, results['Sugeno'], width, label='Sugeno', color='orange')
plt.bar(x + 0.225, results['Mamdani'], width, label='Mamdani', color='red')
plt.plot(x, results['Actual'], 'ko-', label='Actual', markersize=8)

plt.title('Comparison of All Systems on Test Cases')
plt.xlabel('Test Cases')
plt.ylabel("Parkinson's Likelihood")
plt.xticks(x, cases)
plt.legend()
plt.grid(True, axis='y')

plt.tight_layout()
plt.show()

# Visualization 3: RMSE Comparison
plt.figure(figsize=(8, 5))
systems = list(rmse_results.keys())
rmse_values = list(rmse_results.values())

bars = plt.bar(systems, rmse_values, color=['blue', 'green', 'orange', 'red'])
plt.title('RMSE Comparison of Different Fuzzy Systems')
plt.xlabel('Fuzzy System')
plt.ylabel('Root Mean Squared Error')
plt.grid(True, axis='y')

# Add value labels on top of bars
for bar in bars:
    height = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2., height,
             f'{height:.4f}',
             ha='center', va='bottom')

plt.show()

# Visualization 4: Decision Surface Comparison (2D)
plt.figure(figsize=(15, 10))
fixed_r = 5  # Fixed rigidity value for 2D visualization
b_values = np.linspace(0, 10, 20)
t_values = np.linspace(0, 10, 20)
B, T = np.meshgrid(b_values, t_values)

# Prepare grids for each system
Z_expert = np.zeros_like(B)
Z_fcm = np.zeros_like(B)
Z_sugeno = np.zeros_like(B)
Z_mamdani = np.zeros_like(B)

for i in range(len(b_values)):
    for j in range(len(t_values)):
        b = B[j, i]
        t = T[j, i]
        Z_expert[j, i] = apply_expert_rules(b, t, fixed_r)
        Z_fcm[j, i] = apply_extracted_rules(b, t, fixed_r)
        Z_sugeno[j, i] = sugeno_system(b, t, fixed_r)
        Z_mamdani[j, i] = mamdani_inference(b, t, fixed_r)

# Expert Rules Surface
plt.subplot(2, 2, 1)
contour = plt.contourf(B, T, Z_expert, levels=20, cmap='RdYlGn_r')
plt.colorbar(contour, label="Parkinson's Likelihood")
plt.title(f'Expert Rules (Rigidity={fixed_r})')
plt.xlabel('Bradykinesia')
plt.ylabel('Tremor')

# FCM Rules Surface
plt.subplot(2, 2, 2)
contour = plt.contourf(B, T, Z_fcm, levels=20, cmap='RdYlGn_r')
plt.colorbar(contour, label="Parkinson's Likelihood")
plt.title(f'FCM Rules (Rigidity={fixed_r})')
plt.xlabel('Bradykinesia')
plt.ylabel('Tremor')

# Sugeno Surface
plt.subplot(2, 2, 3)
contour = plt.contourf(B, T, Z_sugeno, levels=20, cmap='RdYlGn_r')
plt.colorbar(contour, label="Parkinson's Likelihood")
plt.title(f'Sugeno System (Rigidity={fixed_r})')
plt.xlabel('Bradykinesia')
plt.ylabel('Tremor')

# Mamdani Surface
plt.subplot(2, 2, 4)
contour = plt.contourf(B, T, Z_mamdani, levels=20, cmap='RdYlGn_r')
plt.colorbar(contour, label="Parkinson's Likelihood")
plt.title(f'Mamdani System (Rigidity={fixed_r})')
plt.xlabel('Bradykinesia')
plt.ylabel('Tremor')

plt.tight_layout()
plt.show()







##########################################################################################################
##########################################################################################################
##########################################################################################################







# هر کروموزوم شامل 3 ژن است: bradykinesia, tremor, rigidity
def create_chromosome():
    return np.random.uniform(0, 10, 3)

def fitness(chromosome):
    b, t, r = chromosome
    return sugeno_system(b, t, r)

def genetic_algorithm(pop_size=50, generations=100, mutation_rate=0.1):
    population = [create_chromosome() for _ in range(pop_size)]

    for gen in range(generations):
        fitness_values = [fitness(ind) for ind in population]

        # انتخاب (انتخاب از بهترین‌ها)
        selected = [population[i] for i in np.argsort(fitness_values)[-pop_size//2:]]

        # تولید جمعیت جدید با ترکیب والدها (crossover)
        children = []
        while len(children) < pop_size:
            parents = np.random.choice(len(selected), 2, replace=False)
            p1, p2 = selected[parents[0]], selected[parents[1]]
            crossover_point = np.random.randint(1, 3)
            child = np.concatenate((p1[:crossover_point], p2[crossover_point:]))
            # جهش (mutation)
            if np.random.rand() < mutation_rate:
                child[np.random.randint(0, 3)] = np.random.uniform(0, 10)
            children.append(child)

        population = children

        # نمایش بهترین فرد
        best_idx = np.argmax([fitness(ind) for ind in population])
        best = population[best_idx]
        print(f"Generation {gen+1}: Best fitness = {fitness(best):.4f}, Chromosome = {best}")

    return best

best_solution = genetic_algorithm()
print("\nBest Chromosome (Symptoms) Found:")
print(f"Bradykinesia: {best_solution[0]:.2f}, Tremor: {best_solution[1]:.2f}, Rigidity: {best_solution[2]:.2f}")
